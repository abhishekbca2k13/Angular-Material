Dialog:
The MatDialog service can be used to open modal dialogs with Material Design styling and animations.
	<button mat-raised-button (click)="openDialog()">Pick one</button>

A dialog is opened by calling the open method with a component to be loaded and an optional config object. The open method will 
return an instance of MatDialogRef:
	let dialogRef = dialog.open(UserProfileComponent, {
 		 height: '400px',
  		width: '600px',
	});

The MatDialogRef provides a handle on the opened dialog. It can be used to close the dialog and to receive notification when the dialog
has been closed.
	dialogRef.afterClosed().subscribe(result => {
  		console.log(`Dialog result: ${result}`); // Pizza!
	});
	dialogRef.close('Pizza!');
Components created via MatDialog can inject MatDialogRef and use it to close the dialog in which they are contained. When closing, 
an optional result value can be provided. This result value is forwarded as the result of the afterClosed promise.

@Component({/* ... */})
export class YourDialog {
	constructor(public dialogRef: MatDialogRef<YourDialog>) { }
  	closeDialog() {
  		this.dialogRef.close('Pizza!');
 	 }
}

Configuring dialog content via entryComponents
Because MatDialog instantiates components at run-time, the Angular compiler needs extra information to create the necessary 
ComponentFactory for your dialog content component.

For any component loaded into a dialog, you must include your component class in the list of entryComponents in your NgModule 
definition so that the Angular compiler knows to create the ComponentFactory for it.

@NgModule({
  	declarations: [
    		AppComponent,
   		 ExampleDialogComponent
	  ],
})
export class AppModule {}

Specifying global configuration defaults
Default dialog options can be specified by providing an instance of MatDialogConfig for MAT_DIALOG_DEFAULT_OPTIONS in your application's 
root module.

@NgModule({
 	 providers: [
    		{provide: MAT_DIALOG_DEFAULT_OPTIONS, useValue: {hasBackdrop: false}}
	  ]
})

 Sharing data with the Dialog component
If you want to share data with your dialog, you can use the data option to pass information to the dialog component.
let dialogRef = dialog.open(YourDialog, {
  data: { name: 'austin' },
});

To access the data in your dialog component, you have to use the MAT_DIALOG_DATA injection token:
import {Component, Inject} from '@angular/core';
import {MAT_DIALOG_DATA} from '@angular/material/dialog';
@Component({
  	selector: 'your-dialog',
 	template: 'passed in {{ data.name }}',
})
export class YourDialog {
  	constructor(@Inject(MAT_DIALOG_DATA) public data: any) { }
}

Note that if you're using a template dialog (one that was opened with a TemplateRef), the data will be available implicitly in the 
template:
	<ng-template let-data>
  		Hello, {{data.name}}
	</ng-template>

Adding a custom filter
You can filter the options in any way you like based on the text input*. 
Here we will perform a simple string test on the option value to see if it matches the input value, 
starting from the option's first letter. We already have access to the built-in valueChanges Observable on the FormControl, 
so we can simply map the text input's values to the suggested options by passing them through this filter. 
The resulting Observable, filteredOptions, can be added to the template in place of the options property using the async pipe.

Component.html file code
<mat-form-field class="example-full-width">
    <input type="text" placeholder="Pick one" aria-label="Number" matInput [formControl]="myControl" [matAutocomplete]="auto">
    <mat-autocomplete #auto="matAutocomplete">
      <mat-option *ngFor="let option of filteredOptions | async" [value]="option">
        {{option}}
      </mat-option>
    </mat-autocomplete>
  </mat-form-field>
  
  Component.ts file code
  export class AutocompleteFilterExample implements OnInit {
  myControl = new FormControl();
  options: string[] = ['One', 'Two', 'Three'];
  filteredOptions: Observable<string[]>;

  ngOnInit() {
    this.filteredOptions = this.myControl.valueChanges
      .pipe(
        startWith(''),
        map(value => this._filter(value))
      );
  }

  private _filter(value: string): string[] {
    const filterValue = value.toLowerCase();

    return this.options.filter(option => option.toLowerCase().includes(filterValue));
  }
}
